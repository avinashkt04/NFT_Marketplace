{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/NFTMarket.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\nerror NFTMarket__InvalidAddress();\nerror NFTMarket__NotOwner();\nerror NFTMarket__AlreadyListed();\nerror NFTMarket__NotListed();\nerror NFTMarket__InvalidPrice();\nerror NFTMarket__NotApproved();\nerror NFTMarket__PriceNotMet();\nerror NFTMarket__NoProceeds();\nerror NFTMarket__TransferFailed();\n\ncontract NFTMarket is  ReentrancyGuard {\n    // Structs\n    struct Listing {\n        address seller;\n        uint256 price;\n    }\n\n    // Mapping\n    mapping(address => mapping(uint256 => Listing)) private s_listings;\n    mapping(address => uint256) private s_proceeds;\n\n    // Events\n    event nftListed(\n        address seller,\n        address nftAddress,\n        uint256 tokenId,\n        uint256 price\n    );\n    event nftBought(\n        address buyer,\n        address nftAddress,\n        uint256 tokenId,\n        uint256 price\n    );\n    event nftCancelled(address seller, address nftAddress, uint256 tokenId);\n\n    ////////////////////\n    //   Modifiers    //\n    ////////////////////\n    modifier isERC721(address nftAddress){\n        if (nftAddress == address(0)) {\n            revert NFTMarket__InvalidAddress();\n        }\n    \n        uint256 size;\n        assembly { size := extcodesize(nftAddress) }\n    \n        if (size == 0) {\n            revert NFTMarket__InvalidAddress();\n        }\n        _;\n    }\n\n    modifier isOwner(\n        address nftAddress,\n        uint256 tokenId,\n        address spender\n    ) {\n        IERC721 nft = IERC721(nftAddress);\n        address owner = nft.ownerOf(tokenId);\n        if (spender != owner) {\n            revert NFTMarket__NotOwner();\n        }\n        _;\n    }\n\n    modifier notListed(address nftAddress, uint256 tokenId) {\n        if (s_listings[nftAddress][tokenId].price != 0) {\n            revert NFTMarket__AlreadyListed();\n        }\n        _;\n    }\n\n    modifier isListed(address nftAddress, uint256 tokenId) {\n        if (s_listings[nftAddress][tokenId].price == 0) {\n            revert NFTMarket__NotListed();\n        }\n        _;\n    }\n\n    ////////////////////\n    // Main Functions //\n    ////////////////////\n\n    /**\n     * @notice List an NFT\n     * @param nftAddress : Address of the NFT\n     * @param tokenId : ID of the NFT\n     * @param price : Price of the NFT\n     * @dev This function list the NFT with the given price\n     */\n    function listNft(\n        address nftAddress,\n        uint256 tokenId,\n        uint256 price\n    )\n        external\n        isERC721(nftAddress)\n        notListed(nftAddress, tokenId)\n        isOwner(nftAddress, tokenId, msg.sender)\n    {\n        if (price <= 0) {\n            revert NFTMarket__InvalidPrice();\n        }\n        IERC721 nft = IERC721(nftAddress);\n        if (nft.getApproved(tokenId) != address(this)) {\n            revert NFTMarket__NotApproved();\n        }\n        s_listings[nftAddress][tokenId] = Listing(msg.sender, price);\n        emit nftListed(msg.sender, nftAddress, tokenId, price);\n    }\n\n    /**\n     * @notice Buy an NFT\n     * @param nftAddress : Address of the NFT\n     * @param tokenId : ID of the NFT\n     * @dev This function buy the NFT with the given price\n     */\n    function buyNft(\n        address nftAddress,\n        uint256 tokenId\n    ) external payable nonReentrant isERC721(nftAddress) isListed(nftAddress, tokenId) {\n        Listing memory listedItem = s_listings[nftAddress][tokenId];\n        if (msg.value < listedItem.price) {\n            revert NFTMarket__PriceNotMet();\n        }\n        s_proceeds[listedItem.seller] += msg.value;\n        delete (s_listings[nftAddress][tokenId]);\n        IERC721(nftAddress).safeTransferFrom(\n            listedItem.seller,\n            msg.sender,\n            tokenId\n        );\n        emit nftBought(msg.sender, nftAddress, tokenId, listedItem.price);\n    }\n\n    /**\n     * @notice Cancel the listing of an NFT\n     * @param nftAddress : Address of the NFT\n     * @param tokenId : ID of the NFT\n     * @dev This function cancel the listing of the NFT\n     */\n    function cancelListing(\n        address nftAddress,\n        uint256 tokenId\n    )\n        external\n        isERC721(nftAddress)\n        isOwner(nftAddress, tokenId, msg.sender)\n        isListed(nftAddress, tokenId)\n    {\n        delete (s_listings[nftAddress][tokenId]);\n        emit nftCancelled(msg.sender, nftAddress, tokenId);\n    }\n\n    /**\n     * @notice Update the listing of an NFT\n     * @param nftAddress : Address of the NFT\n     * @param tokenId : ID of the NFT\n     * @param newPrice : New price of the NFT\n     * @dev This function update the listing of the NFT with the new price\n     */\n    function updateListing(\n        address nftAddress,\n        uint256 tokenId,\n        uint256 newPrice\n    )\n        external\n        isERC721(nftAddress)\n        isOwner(nftAddress, tokenId, msg.sender)\n        isListed(nftAddress, tokenId)\n    {\n        if (newPrice <= 0) {\n            revert NFTMarket__InvalidPrice();\n        }\n        s_listings[nftAddress][tokenId].price = newPrice;\n        emit nftListed(msg.sender, nftAddress, tokenId, newPrice);\n    }\n\n    /**\n     * @notice Withdraw the proceeds\n     * @dev This function withdraw the proceeds of the seller\n     */\n    function withdrawProceeds() external {\n        uint256 proceeds = s_proceeds[msg.sender];\n        if (proceeds == 0) {\n            revert NFTMarket__NoProceeds();\n        }\n        s_proceeds[msg.sender] = 0;\n        (bool success, ) = msg.sender.call{value: proceeds}(\"\");\n        if (!success) {\n            revert NFTMarket__TransferFailed();\n        }\n    }\n\n    /////////////////////\n    // Getter Function //\n    /////////////////////\n\n    function getListing(\n        address nftAddress,\n        uint256 tokenId\n    ) external view returns (Listing memory) {\n        return s_listings[nftAddress][tokenId];\n    }\n\n    function getProceeds(address seller) external view returns (uint256) {\n        return s_proceeds[seller];\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}